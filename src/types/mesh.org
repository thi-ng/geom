#+SETUPFILE: ../../meta/setup.org

* Contents                                                         :toc_4_gh:
 - [[#thinggeommesh-deprecated-do-not-use][thi.ng.geom.mesh (deprecated, do not use)]]
     - [[#shared-2d3d-functions][Shared 2d/3d functions]]
     - [[#constructors][Constructors]]
     - [[#protocol-implementations][Protocol implementations]]
         - [[#mesh2][Mesh2]]
             - [[#igraph][IGraph]]
             - [[#iarea][IArea]]
             - [[#todo-icircumference][TODO ICircumference]]
             - [[#ibounds][IBounds]]
             - [[#iboundingcircle][IBoundingCircle]]
             - [[#todo-icenter][TODO ICenter]]
             - [[#todo-iboundary][TODO IBoundary]]
             - [[#imesh][IMesh]]
             - [[#imeshconvert][IMeshConvert]]
             - [[#isubdivide][ISubdivide]]
             - [[#islice][ISlice]]
             - [[#end-of-implementation][End of implementation]]
         - [[#mesh3][Mesh3]]
             - [[#igraph][IGraph]]
             - [[#iarea][IArea]]
             - [[#ibounds][IBounds]]
             - [[#todo-icenter][TODO ICenter]]
             - [[#iboundingsphere][IBoundingSphere]]
             - [[#todo-ivolume][TODO IVolume]]
             - [[#todo-iboundary][TODO IBoundary]]
             - [[#imesh][IMesh]]
             - [[#imeshconvert][IMeshConvert]]
             - [[#isubdivide][ISubdivide]]
             - [[#islice][ISlice]]
             - [[#end-of-implementation][End of implementation]]
     - [[#type-specific-functions][Type specific functions]]
         - [[#todo-refactor-transform-as-protocol-method][TODO refactor transform as protocol method]]
     - [[#namespace-declaration][Namespace declaration]]

* thi.ng.geom.mesh (deprecated, do not use)

** Shared 2d/3d functions
#+BEGIN_SRC clojure :noweb-ref helpers
  (defn add-face
    [{:keys [vertices edges faces] :as mesh} [a b c] & attribs]
    (let [a (get (find vertices a) 0 a)
          b (get (find vertices b) 0 b)
          c (get (find vertices c) 0 c)
          f [a b c]]
      (if (and (nil? (get faces f))
               (not (or (= a b) (= a c) (= b c))))
        (let [vertices (-> vertices
                           (d/index-kv a {:next b :prev c :f f})
                           (d/index-kv b {:next c :prev a :f f})
                           (d/index-kv c {:next a :prev b :f f}))
              edges (-> edges (d/index-kv #{a b} f) (d/index-kv #{b c} f) (d/index-kv #{c a} f))]
          (assoc mesh
            :vertices vertices
            :edges edges
            :faces (conj faces f)))
        mesh)))

  (defn add-face!
    "Internal helper fn to add a face using transients of a mesh structure.
    Returns vector of new transients `[vertices edges faces]`."
    [[vertices edges faces] [a b c :as f]]
    (if (and (nil? (get faces f))
             (not (or (= a b) (= a c) (= b c))))
      (let [vertices (-> vertices
                         (d/index-kv! a {:next b :prev c :f f})
                         (d/index-kv! b {:next c :prev a :f f})
                         (d/index-kv! c {:next a :prev b :f f}))
            edges (-> edges (d/index-kv! #{a b} f) (d/index-kv! #{b c} f) (d/index-kv! #{c a} f))]
        [vertices edges (conj! faces f)])
      [vertices edges faces]))

  (defn begin-edit
    [{:keys [vertices edges faces]}]
    [(transient vertices) (transient edges) (transient faces)])

  (defn commit-edit
    [mesh [vertices edges faces]]
    (assoc mesh
      :vertices (persistent! vertices)
      :edges    (persistent! edges)
      :faces    (persistent! faces)))

  (defn into-mesh
    "Adds all faces of the elements given in `more` to the mesh `mesh`.
    Each element of `more` can be either an existing mesh or a face list."
    [mesh cast & more]
    (commit-edit
     mesh
     (reduce
      (fn [edits m-or-faces]
        (let [faces (if (satisfies? g/IMesh m-or-faces)
                      (g/faces m-or-faces)
                      (map #(if (map? %) [(:a %) (:b %) (:c %)] %) m-or-faces))
              faces (if cast
                      (map (fn [f] [(cast (f 0)) (cast (f 1)) (cast (f 2))]) faces)
                      faces)]
          (reduce add-face! edits faces)))
      (begin-edit mesh)
      more)))

  (defn vertex-neighbors*
    [{vertices :vertices} v]
    (set/union
     (d/value-set :next vertices v)
     (d/value-set :prev vertices v)))

  (defn vertex-valence*
    [mesh v] (inc (count (get (:vertices mesh) v))))

  (defn vertex-faces*
    [mesh v] (d/value-set :f (:vertices mesh) v))

  (defn remove-vertex*
    [mesh v]
    (if (find (:vertices mesh) v)
      (reduce g/remove-face mesh (vertex-faces* mesh v))
      mesh))

  (defn replace-vertex*
    ([mesh v v2]
       (let [vfaces (vertex-faces* mesh v)]
         (-> (reduce g/remove-face mesh vfaces)
             (replace-vertex* v v2 vfaces))))
    ([mesh v v2 faces]
       (reduce #(add-face % (replace {v v2} %2)) mesh faces)))

  (defn merge-vertices*
    [mesh a b]
    (if ((vertex-neighbors* mesh a) b)
      (let [fa (vertex-faces* mesh a) fb (vertex-faces* mesh b)
            ab-isec (set/intersection fa fb)
            a-xor (set/difference fa ab-isec)
            b-xor (set/difference fb ab-isec)
            mp (m/mix a b)]
        (-> (reduce g/remove-face mesh (set/union ab-isec a-xor b-xor))
            (replace-vertex* a mp a-xor)
            (replace-vertex* b mp b-xor)))
      mesh))

  (defn subdivide-edge*
    [mesh a b splits]
    (if ((vertex-neighbors* mesh a) b)
      (let [fa (vertex-faces* mesh a) fb (vertex-faces* mesh b)
            faces (set/intersection fa fb)
            s-points (map #(m/mix a b %) (d/wrap-seq splits 0.0 1.0))
            s-points (d/successive-nth 2 s-points)]
        (reduce
         (fn [[mesh newfaces] f]
           (reduce
            (fn [[mesh newfaces] [sa sb]]
              (let [nf (replace {a sa b sb} f)]
                [(add-face mesh nf) (conj newfaces nf)]))
            [mesh newfaces] s-points))
         [(reduce g/remove-face mesh faces) #{}]
         faces))
      mesh))

  (defn subdivide-face*
    [mesh [a b c :as f] p displace splits]
    (if (seq splits)
      (let [splits (d/wrap-seq splits 0.0 1.0)
            {:keys [vertices edges faces] :as mesh} (g/remove-face mesh f)
            edge-vertex (if displace
                          (fn [[ea eb :as e] t] (displace e (m/mix ea eb t) t))
                          (fn [[ea eb] t] (m/mix ea eb t)))]
        (commit-edit
         mesh
         (reduce
          (fn [mesh e]
            (reduce
             (fn [mesh [sa sb]] (add-face! mesh [sa sb p]))
             mesh (d/successive-nth
                   2 (map #(edge-vertex e %) splits))))
          (begin-edit mesh)
          [[a b] [b c] [c a]])))
      (-> (g/remove-face mesh f)
          (add-face [a b p])
          (add-face [b c p])
          (add-face [c a p]))))

  (defn subdivide*
    [mesh {:keys [vertex displace filter splits] :or {vertex t/centroid*}}]
    (reduce
     (fn [mesh f] (subdivide-face* mesh f (vertex f) displace splits))
     mesh
     (if filter
       (clojure.core/filter filter (:faces mesh))
       (:faces mesh))))

  (defn slice-with*
    [mesh e classifier faces]
    (let [verts (persistent!
                 (reduce #(-> (conj! % (%2 0)) (conj! (%2 1)) (conj! (%2 2)))
                         (transient #{}) faces))
          cverts (zipmap verts (map #(classifier e %) verts))
          classifier-cache #(get cverts %2)]
      (reduce
       (fn [[mesh nf :as state] f]
         (if-let [tfaces (t/slice-with* f e classifier-cache)]
           [(reduce add-face
                    (reduce add-face (g/remove-face mesh f) (get tfaces -1))
                    (get tfaces 1))
            (into (into nf (get tfaces -1)) (get tfaces 1))]
           state))
       [mesh []] faces)))
#+END_SRC
** Constructors
#+BEGIN_SRC clojure :noweb-ref ctors
  (defn mesh2
    "Builds a new 2d mesh data structure and (optionally) populates it with
    the given items (a seq of existing meshes and/or faces). Faces are defined
    as 3-element vectors of their vertices."
    ([] (types/map->Mesh2
         {:vertices {} :edges {} :fnormals {} :vnormals {}
          :normals #{} :faces #{}}))
    ([& more]
       (if (instance? thi.ng.geom.types.Mesh2 (first more))
         (into-mesh (first more) vec2 (rest more))
         (into-mesh (mesh2) vec2 more))))

  (defn mesh3
    ([] (types/map->Mesh3
         {:vertices {} :edges {} :fnormals {} :vnormals {}
          :normals #{} :faces #{}}))
    ([& more]
       (if (instance? thi.ng.geom.types.Mesh3 (first more))
         (into-mesh (first more) vec3 (rest more))
         (into-mesh (mesh3) vec3 more))))
#+END_SRC
** Protocol implementations
*** Mesh2
#+BEGIN_SRC clojure :noweb-ref impl2
  (extend-type thi.ng.geom.types.Mesh2
#+END_SRC
**** IGraph
#+BEGIN_SRC clojure :noweb-ref impl2
  g/IGraph
  (edges
   [_] (keys (:edges _)))
  (vertices
   [_] (keys (:vertices _)))
  (vertex-neighbors
   [_ v] (vertex-neighbors* _ v))
  (vertex-valence
   [_ v] (vertex-valence* _ v))
#+END_SRC
**** IArea
#+BEGIN_SRC clojure :noweb-ref impl2
  g/IArea
  (area [_]
        (->> (:faces _)
             (map #(m/abs* (apply gu/tri-area2 %)))
             (reduce +)))
#+END_SRC
**** TODO ICircumference
#+BEGIN_SRC clojure :noweb-ref impl2
  g/ICircumference
  (circumference [_] 0)
#+END_SRC
**** IBounds
#+BEGIN_SRC clojure :noweb-ref impl2
  g/IBounds
  (bounds [_] (g/bounding-rect* (keys (:vertices _))))
  (width [_] (g/axis-range* 0 (keys (:vertices _))))
  (height [_] (g/axis-range* 1 (keys (:vertices _))))
  (depth [_] 0)
#+END_SRC
**** IBoundingCircle
#+BEGIN_SRC clojure :noweb-ref impl2
  g/IBoundingCircle
  (bounding-circle
   [_] (g/bounding-circle* (g/centroid _) (g/vertices _)))
#+END_SRC
**** TODO ICenter
#+BEGIN_SRC clojure :noweb-ref impl2
  g/ICenter
  (center [_] _)
  (centroid [_] (g/centroid* (keys (:vertices _))))
#+END_SRC
**** TODO IBoundary
#+BEGIN_SRC clojure :noweb-ref impl2

#+END_SRC
**** IMesh
#+BEGIN_SRC clojure :noweb-ref impl2
  g/IMesh
  (faces
   [_] (:faces _))
  (vertex-faces
   [_ v] (vertex-faces* _ v))
  (compute-face-normals
   [_] _)
  (compute-vertex-normals
   [_] _)
  (remove-face
   [{:keys [vertices edges faces] :as _} f]
   (if (get faces f)
     (let [[vertices edges]
           (reduce
            (fn [[vertices edges] [a b]]
              (let [e #{a b}
                    efaces (disj (get edges e) f)
                    edges (if (seq efaces)
                            (assoc edges e efaces)
                            (dissoc edges e))
                    ve (filter #(not= (:f %) f) (get vertices a))]
                (if (seq ve)
                  [(assoc vertices a (into #{} ve)) edges]
                  [(dissoc vertices a) edges])))
            [vertices edges]
            (d/successive-nth 2 (conj f (first f))))]
       (assoc _
         :vertices vertices
         :edges edges
         :faces (disj faces f)))
     _))
  (remove-vertex
   [_ v] (remove-vertex* _ v))
  (replace-vertex
   [_ v v2] (replace-vertex* _ v v2))
  (merge-vertices
   [_ a b] (merge-vertices* _ a b))
#+END_SRC
**** IMeshConvert
#+BEGIN_SRC clojure :noweb-ref impl2
  g/IMeshConvert
  (as-mesh [_] _)
#+END_SRC

**** ISubdivide
#+BEGIN_SRC clojure :noweb-ref impl2
  g/ISubdivide
  (subdivide-edge
   [_ a b splits] (subdivide-edge* _ a b splits))
  (subdivide-face
   [_ f p opts]
   (subdivide-face* _ f p (:displace opts) (:splits opts)))
  (subdivide
   [_ opts]
   (subdivide* _ opts))
#+END_SRC
**** ISlice
#+BEGIN_SRC clojure :noweb-ref impl2
  g/ISlice
  (slice-with
   ([_ e]
      (slice-with* _ e g/classify-point (:faces _)))
   ([_ e classifier]
      (slice-with* _ e classifier (:faces _)))
   ([_ e classifier faces]
      (slice-with* _ e classifier faces)))
#+END_SRC
**** End of implementation                                         :noexport:
#+BEGIN_SRC clojure :noweb-ref impl2
  )
#+END_SRC
*** Mesh3
#+BEGIN_SRC clojure :noweb-ref impl3
  (extend-type thi.ng.geom.types.Mesh3
#+END_SRC
**** IGraph
#+BEGIN_SRC clojure :noweb-ref impl3
  g/IGraph
  (edges
   [_] (keys (:edges _)))
  (vertices
   [_] (keys (:vertices _)))
  (vertex-neighbors
   [_ v] (vertex-neighbors* _ v))
  (vertex-valence
   [_ v] (vertex-valence* _ v))
#+END_SRC
**** IArea
#+BEGIN_SRC clojure :noweb-ref impl3
  g/IArea
  (area
   [_]
   (->> (:faces _)
        (map #(m/abs* (apply gu/tri-area3 %)))
        (reduce +)))
#+END_SRC
**** IBounds
#+BEGIN_SRC clojure :noweb-ref impl3
  g/IBounds
  (bounds [_] (g/bounding-box* (keys (:vertices _))))
  (width [_] (g/axis-range* 0 (keys (:vertices _))))
  (height [_] (g/axis-range* 1 (keys (:vertices _))))
  (depth [_] (g/axis-range* 2 (keys (:vertices _))))
#+END_SRC
**** TODO ICenter
#+BEGIN_SRC clojure :noweb-ref impl3
  g/ICenter
  (center [_] _)
  (centroid [_] (g/centroid* (keys (:vertices _))))
#+END_SRC
**** IBoundingSphere
#+BEGIN_SRC clojure :noweb-ref impl3
  g/IBoundingSphere
  (bounding-sphere
   [_] (g/bounding-sphere* (g/centroid _) (g/vertices _)))
#+END_SRC
**** TODO IVolume
#+BEGIN_SRC clojure :noweb-ref impl3
  g/IVolume
  (volume [_] 0)
#+END_SRC
**** TODO IBoundary
#+BEGIN_SRC clojure :noweb-ref impl3

#+END_SRC
**** IMesh
#+BEGIN_SRC clojure :noweb-ref impl3
  g/IMesh
  (faces
   [_] (:faces _))
  (vertex-faces
   [_ v] (vertex-faces* _ v))
  (compute-face-normals
   [{:keys [faces] :as _}]
   (let [[normals fnormals]
         (reduce
          (fn [[norms fnorms] [a b c :as f]]
            (let [[norms n] (d/index! norms (g/ortho-normal* a b c))]
              [norms (assoc! fnorms f n)]))
          [(transient #{}) (transient {})] faces)]
     (assoc _
       :normals (persistent! normals)
       :fnormals (persistent! fnormals))))
  (compute-vertex-normals
   [{:keys [vertices normals fnormals] :as _}]
   (let [[normals vnormals]
         (reduce
          (fn [[norms vnorms] v]
            (let [faces (g/vertex-faces _ v)
                  n (->> faces
                         (map #(get fnormals %))
                         (reduce m/+)
                         (m/normalize))
                  [norms n] (d/index! norms n)]
              [norms (assoc! vnorms v n)]))
          [(transient normals) (transient {})] (keys vertices))]
     (assoc _
       :normals (persistent! normals)
       :vnormals (persistent! vnormals))))
  (remove-face
   [{:keys [vertices edges faces fnormals vnormals] :as _} f]
   (if (get faces f)
     (let [[vertices vnormals edges]
           (reduce
            (fn [[vertices vnormals edges] [a b]]
              (let [e #{a b} efaces (disj (get edges e) f)
                    edges (if (seq efaces)
                            (assoc edges e efaces)
                            (dissoc edges e))
                    ve (filter #(not= (:f %) f) (get vertices a))]
                (if (seq ve)
                  [(assoc vertices a (into #{} ve)) vnormals edges]
                  [(dissoc vertices a) (dissoc vnormals a) edges])))
            [vertices vnormals edges]
            (d/successive-nth 2 (conj f (first f))))]
       (assoc _
         :vertices vertices
         :vnormals vnormals
         :edges edges
         :faces (disj faces f)
         :fnormals (dissoc fnormals f)))
     _))
  (remove-vertex
   [_ v] (remove-vertex* _ v))
  (replace-vertex
   [_ v v2] (replace-vertex* _ v v2))
  (merge-vertices
   [_ a b] (merge-vertices* _ a b))
#+END_SRC
**** IMeshConvert
#+BEGIN_SRC clojure :noweb-ref impl3
  g/IMeshConvert
  (as-mesh [_] _)
#+END_SRC

**** ISubdivide
#+BEGIN_SRC clojure :noweb-ref impl3
  g/ISubdivide
  (subdivide-edge [_ a b splits] (subdivide-edge* _ a b splits))
  (subdivide-face
   [_ f p opts] (subdivide-face* _ f p (:displace opts) (:splits opts)))
  (subdivide [_ opts] (subdivide* _ opts))
#+END_SRC
**** ISlice
#+BEGIN_SRC clojure :noweb-ref impl3
  g/ISlice
  (slice-with
   ([_ e] (slice-with* _ e g/classify-point (:faces _)))
   ([_ e classifier] (slice-with* _ e classifier (:faces _)))
   ([_ e classifier faces] (slice-with* _ e classifier faces)))
#+END_SRC
**** End of implementation                                         :noexport:
#+BEGIN_SRC clojure :noweb-ref impl3
  )
#+END_SRC
** Type specific functions
*** TODO refactor transform as protocol method
#+BEGIN_SRC clojure :noweb-ref meshops
  (defn loop-subdivide-face
    [mesh [a b c :as f]]
    (let [{:keys [vertices edges faces] :as mesh} (g/remove-face mesh f)
          [mab mbc mca] (map (fn [[p q]] (m/mix p q)) [[a b] [b c] [c a]])]
      (reduce add-face mesh [[a mab mca] [mab b mbc] [mbc c mca] [mab mbc mca]])))
  
  (defn loop-subdivide-mesh
    ([mesh] (loop-subdivide-mesh 1 mesh))
    ([n mesh] (reduce (fn [mesh _] (reduce loop-subdivide-face mesh (:faces mesh))) mesh (range n)))
    ([n f mesh] (reduce (fn [mesh _] (reduce loop-subdivide-face mesh (filter f (:faces mesh)))) mesh (range n))))
  
  (defn laplacian2
    [{:keys[vnormals] :as mesh} amp]
    (fn [p]
      (let [neighbors (g/vertex-neighbors mesh p)]
        (m/+ p
           (m/normalize
            (reduce m/+ (vnormals p) (map (comp #(m/* % 0.5) vnormals) neighbors))
            amp)))))
  
  (defn laplacian
    [mesh]
    (fn [p]
      (let [neighbors (g/vertex-neighbors mesh p)
            nc (count neighbors)]
        (if (pos? nc)
          (m/* (reduce m/+ neighbors) (/ 1.0 nc))
          p))))
  
  (defn spherify
    [r] #(m/normalize % r))
  
  (defn transform-with
    [{:keys [faces vertices fns]} f]
    (let [subst (into (hash-map) (map (fn [v] [v (f v)]) (keys vertices)))]
      (apply mesh3
             (map (fn[[a b c]] [(get subst a) (get subst b) (get subst c)])
                  faces))))
  
  (defn keep-faces
    ([mesh f] (keep-faces mesh f (:faces mesh)))
    ([mesh f faces]
       (reduce
        (fn [mesh face] (if (f face) mesh (g/remove-face mesh face)))
        mesh faces)))
  
  (defn trianglestrip-faces
    "Takes two seqs of linestrip style points and returns a lazyseq of
    faces connecting them. The boolean flip? arg controls face orientation."
    [averts bverts flip?]
    (mapcat
     (if flip?
       (fn [[a1 a2] [b1 b2]] [[a1 b1 a2] [a2 b1 b2]])
       (fn [[a1 a2] [b1 b2]] [[a1 a2 b1] [a2 b2 b1]]))
     (d/successive-nth 2 averts) (d/successive-nth 2 bverts)))
#+END_SRC

** Namespace declaration
#+BEGIN_SRC clojure
  ;;:tangle ../../babel/src/thi/ng/geom/mesh.cljc :mkdirp yes :padline no
  (ns thi.ng.geom.mesh
    (:require
     [thi.ng.dstruct.core :as d]
     [thi.ng.math.core :as m]
     [thi.ng.geom.core :as g :refer [vec2 vec3]]
     [thi.ng.geom.triangle :as t]
     [thi.ng.geom.types :as types]
     [clojure.set :as set])
    #?(:clj
       (:import
        [thi.ng.geom.types AABB Sphere Mesh2 Mesh3])))

  <<helpers>>

  <<ctors>>

  <<impl2>>

  <<impl3>>

  <<meshops>>
#+END_SRC
